{
  "entityType" : "DEVICE_PROFILE",
  "entity" : {
    "default" : false,
    "defaultDashboardId" : null,
    "defaultEdgeRuleChainId" : null,
    "defaultQueueName" : null,
    "defaultRuleChainId" : {
      "entityType" : "RULE_CHAIN",
      "id" : "548c7030-0d1c-11ef-8af8-23143bab9148"
    },
    "description" : "",
    "externalId" : null,
    "firmwareId" : null,
    "id" : {
      "entityType" : "DEVICE_PROFILE",
      "id" : "b3222720-0d1c-11ef-8af8-23143bab9148"
    },
    "image" : null,
    "name" : "EMU423",
    "profileData" : {
      "alarms" : null,
      "configuration" : {
        "type" : "DEFAULT"
      },
      "provisionConfiguration" : {
        "type" : "DISABLED",
        "provisionDeviceSecret" : null
      },
      "transportConfiguration" : {
        "type" : "MQTT",
        "deviceAttributesSubscribeTopic" : "v1/devices/me/attributes",
        "deviceAttributesTopic" : "v1/devices/me/attributes",
        "deviceTelemetryTopic" : "v1/devices/me/telemetry",
        "sendAckOnValidationException" : false,
        "sparkplug" : false,
        "sparkplugAttributesMetricNames" : [ "Properties/*", "Device Control/*", "Node Control/*" ],
        "transportPayloadTypeConfiguration" : {
          "transportPayloadType" : "PROTOBUF",
          "deviceAttributesProtoSchema" : "syntax = \"proto3\";\npackage attributes;\n\nenum KeyValueType {\n    BOOLEAN_V = 0;\n    LONG_V = 1;\n    DOUBLE_V = 2;\n    STRING_V = 3;\n    JSON_V = 4;\n    CREAT_DEV_V = 5;\n    DELETE_DEV_V = 6;\n    DEVICE_STATUS_V = 7;\n    LOGIC_TREE_V = 8;\n}\n\nmessage createDevice {\n    string deviceName = 1;\n    string deviceType = 2;\n}\nmessage deleteDevice {\n    string deviceName = 1;\n}\nmessage deviceStatus {\n    string deviceName = 1;\n    bytes status = 2; // 1 在线，2 离线\n}\nmessage uploadLogicTree {\n    string logicTree = 1; //JSON格式字符串\n}\n\n\nmessage KeyValueProto {\n    optional string key = 1;\n    optional KeyValueType type = 2;\n    optional bool bool_v = 3;\n    optional int64 long_v = 4;\n    optional double double_v = 5;\n    optional string string_v = 6;\n    optional string json_v = 7;\n    optional createDevice createDevice = 8;\n    optional deleteDevice deleteDevice = 9;\n    optional deviceStatus deviceStatus = 10;\n    optional uploadLogicTree uploadLogicTree = 11;\n}\nmessage CmdMsg {\n    uint64 requestId = 1;\n    string method = 2;\n    repeated KeyValueProto params = 3;\n}\nmessage REQ {\n    CmdMsg request = 1;\n}",
          "deviceRpcRequestProtoSchema" : "syntax =\"proto3\";\npackage rpc;\nenum KeyValueType {\n  BOOLEAN_V = 0;\n  LONG_V = 1;\n  DOUBLE_V = 2;\n  STRING_V = 3;\n  JSON_V = 4;\n  RESPONSE_V =5;\n  BASIC_SETTING_CONFIG_V = 6;  \n}\nmessage response{  //服务端回复请求\n  uint64 msgid =1;      // 信息ID 与 请求id一致\n  bytes resultCode = 2 ;//0是失败，1是成功\n  optional string msg = 3 ;      //信息\n}\n\n//读取基础设置请求\nmessage GetBasicSetting {\n  string deviceId = 1; // 设备ID\n}\n\nmessage EnergyStorageSetting {\n  uint32 socLowerLimit = 1; // 储能SOC的下限值\n  uint32 socUpperLimit = 2; // 储能SOC的上限值\n  double pcsMaxPower = 3; // PCS输入输出最大功率\n  double inverterMaxOutputPower = 4; // 逆变器最大输出功率\n  bool antiReverseFlowEnabled = 5; // 是否启用防逆流控制\n  double antiReverseFlowPowerLimit = 6; // 防逆流功率限制\n  uint32 antiReverseFlowDuration = 7; // 防逆流持续时间\n  bool demandControlEnabled = 8; // 是否启用需量控制\n  double demandControlValue = 9; // 需量控制值\n  double excessPower = 10; // 超出功率\n  uint32 excessDuration = 11; // 超出时长\n}\n\n// 下发基础设置IOT报文消息定义，包括DeviceId和EnergyStorageSetting\nmessage BasicSettingConfig {\n  string deviceId = 1; // 设备ID\n  EnergyStorageSetting energyStorageSetting = 2; // 储能设定\n}\n\n//------------------------------------------------------------------------------------\n\n//读取调度策略设置请求\nmessage GetSchedulingPolicySetting {\n  string deviceId = 1; // 设备ID\n}\n\n// 定义存储充放电时段的消息\nmessage StorageChargeDischargePeriod {\n  string startTime = 1; // 时段开始时间\n  string endTime = 2; // 时段结束时间\n  int32 state = 3; // 充电状态：0为充电，1为放电\n  int32 soc = 4; // 储能SOC\n}\n\n// 定义TOU设置的消息\nmessage TouSetting {\n  double buyElectricityThreshold = 1; // 电网购电阈值\n  double adjustmentDeadzone = 2; // 调节死区\n  int32 pvAdjustmentPeriod = 3; // 光伏系统调节周期\n  int32 pvAdjustmentStep = 4; // 光伏系统调节步长\n  repeated StorageChargeDischargePeriod storageChargeDischargePeriods = 5; // 储能充放电时段\n}\n\n// 定义智能TOU设置的消息\nmessage IntelligentTouSetting {\n  double buyElectricityThreshold = 1; // 电网购电阈值\n  double adjustmentDeadzone = 2; // 调节死区\n  int32 pvAdjustmentPeriod = 3; // 光伏系统调节周期\n  int32 pvAdjustmentStep = 4; // 光伏系统调节步长\n  repeated StorageChargeDischargePeriod storageChargeDischargePeriods = 5; // 储能充放电时段\n}\n\n// 定义手动设置的消息\nmessage ManualSetting {\n  double pvLimitPower = 1; // 光伏限制功率\n  double storagePcsLimitPower = 2; // 储能pcs限制功率\n  int32 chargeDischargeOperation = 3; // 充放电操作\n  int32 cutoffLowerSOC = 4; // 截止下限SOC\n  int32 cutoffUpperSOC = 5; // 截止上限SOC\n}\n\n// 定义调度策略设置的消息\nmessage SchedulingPolicySetting {\n  int32 settingType = 1; // 设置类型\n  TouSetting touSetting = 2; // TOU设置\n  IntelligentTouSetting intelligentTouSetting = 3; // 智能TOU设置\n  ManualSetting manualSetting = 4; // 手动设置\n}\n\n// 定义调度策略配置的消息\nmessage SchedulingPolicySettingConfig {\n  string deviceId = 1; // 设备ID\n  SchedulingPolicySetting schedulingPolicySetting = 2; // 调度策略设置\n}\n\n//------------------------------------------------------------------------------------\nmessage KeyValueProto {\n  optional string key = 1;\n  optional KeyValueType type = 2;\n  optional bool bool_v = 3;\n  optional int64 long_v = 4;\n  optional double double_v = 5;\n  optional string string_v = 6;\n  optional string json_v = 7;\n  optional response response = 8;\n  optional GetBasicSetting getBasicSetting = 9;\n  optional BasicSettingConfig basicSettingConfig = 10;\n  optional GetSchedulingPolicySetting getSchedulingPolicySetting = 11;\n  optional SchedulingPolicySettingConfig schedulingPolicySettingConfig = 12;\n\n}\n\nmessage RpcRequestMsg {\n  optional string method = 1;\n  optional int32 requestId = 2;\n  KeyValueProto params  = 3;\n}",
          "deviceRpcResponseProtoSchema" : "syntax = \"proto3\";\npackage rpc;\n\nmessage BasicSetting {\n    uint32 socLowerLimit = 1; // 储能SOC的下限值\n    uint32 socUpperLimit = 2; // 储能SOC的上限值\n    double pcsMaxPower = 3; // PCS输入输出最大功率\n    double inverterMaxOutputPower = 4; // 逆变器最大输出功率\n    bool antiReverseFlowEnabled = 5; // 是否启用防逆流控制\n    double antiReverseFlowPowerLimit = 6; // 防逆流功率限制\n    uint32 antiReverseFlowDuration = 7; // 防逆流持续时间\n    bool demandControlEnabled = 8; // 是否启用需量控制\n    double demandControlValue = 9; // 需量控制值\n    double excessPower = 10; // 超出功率\n    uint32 excessDuration = 11; // 超出时长\n}\n\n// 下发基础设置IOT报文消息定义，包括DeviceId和EnergyStorageSetting\nmessage BasicSettingConfig {\n    string deviceId = 1; // 设备ID\n    BasicSetting basicSetting = 2; // 储能设定\n}\n\n\n\n// 定义存储充放电时段的消息\nmessage StorageChargeDischargePeriod {\n    string startTime = 1; // 时段开始时间\n    string endTime = 2; // 时段结束时间\n    int32 state = 3; // 充电状态：0为充电，1为放电\n    int32 soc = 4; // 储能SOC\n}\n\n// 定义TOU设置的消息\nmessage TouSetting {\n    double buyElectricityThreshold = 1; // 电网购电阈值\n    double adjustmentDeadzone = 2; // 调节死区\n    int32 pvAdjustmentPeriod = 3; // 光伏系统调节周期\n    int32 pvAdjustmentStep = 4; // 光伏系统调节步长\n    repeated StorageChargeDischargePeriod storageChargeDischargePeriods\n        = 5; // 储能充放电时段\n}\n\n// 定义智能TOU设置的消息\nmessage IntelligentTouSetting {\n    double buyElectricityThreshold = 1; // 电网购电阈值\n    double adjustmentDeadzone = 2; // 调节死区\n    int32 pvAdjustmentPeriod = 3; // 光伏系统调节周期\n    int32 pvAdjustmentStep = 4; // 光伏系统调节步长\n    repeated StorageChargeDischargePeriod storageChargeDischargePeriods\n        = 5; // 储能充放电时段\n}\n\n// 定义手动设置的消息\nmessage ManualSetting {\n    double pvLimitPower = 1; // 光伏限制功率\n    double storagePcsLimitPower = 2; // 储能pcs限制功率\n    int32 chargeDischargeOperation = 3; // 充放电操作\n    int32 cutoffLowerSOC = 4; // 截止下限SOC\n    int32 cutoffUpperSOC = 5; // 截止上限SOC\n}\n\n// 定义调度策略设置的消息\nmessage SchedulingPolicySetting {\n    int32 settingType = 1; // 设置类型\n    TouSetting touSetting = 2; // TOU设置\n    IntelligentTouSetting intelligentTouSetting =\n    3; // 智能TOU设置\n    ManualSetting manualSetting = 4; // 手动设置\n}\n\n// 定义调度策略配置的消息\nmessage SchedulingPolicySettingConfig {\n    string deviceId = 1; // 设备ID\n    SchedulingPolicySetting schedulingPolicySetting =\n    2; // 调度策略设置\n}\n\nmessage SetResult {\n    int32 statusCode = 1;\n    string message = 2;\n}\n\n\nmessage RpcResponseMsg {\n    optional BasicSettingConfig basicSettingConfig = 1;\n    optional SchedulingPolicySettingConfig schedulingPolicySettingConfig = 2;\n    optional SetResult setResult = 3;\n}",
          "deviceTelemetryProtoSchema" : "syntax = \"proto3\";\npackage aiko_iot;\n\nmessage device_state {\n\n    emu_s emu = 1;\n    meter_group meter = 2;\n    pvi_group pvInverter = 3;\n    env_group environment = 4;\n    bcu_group bcu = 5;\n    optimizer_group optimizer = 6;\n    pcs_group pcs = 7;\n\n\n    /*\n     * emu_s - 能量控制器\n     *\n     * @id - 标识符\n     * @control - 控制模式\n     *     1:手动模式\n     *     2:自动模式\n     * @grid - 运行模式\n     *     1:并网模式;\n     *     2:离网模式\n     * @strategy - 运行策略\n     *     1:削峰填谷策略\n     *     2:需量控制策略\n     *     3:离网策略\n     *     4:削峰填谷&需量控制策略\n     *     5.自发自用\n     * @timestamp - 时间戳\n     */\n    message emu_s {\n        string id = 1;\n        int32 control = 2;\n        int32 grid = 3;\n        int32 strategy = 4;\n        uint64 timestamp = 5;\n    }\n\n    message emu_group {\n        repeated emu_s emu = 1;\n    }\n\n    message meter_group {\n        repeated meter_state meter = 1;\n    }\n    message meter_state {\n        string id = 1; //电表标识符\n        float Ua = 2; //A相电压 V\n        optional float Ub = 3; //B相电压 V\n        optional float Uc = 4; //C相电压 V\n        float Ia = 5; //A相电流  A\n        optional float Ib = 6; //B相电流 A\n        optional float Ic = 7; //C相电流 A\n        optional float frequency = 8; //电网频率 Hz\n        optional float activePower = 9; //有功功率 KW\n        optional float reactivePower = 10; //无功功率 KW\n        optional float appPower = 11; //市在功率 KW\n        optional uint64 timestamp = 12; //时间戳\n        optional float factor = 13; //功率因素 0~1\n        optional float ABLineVolt = 14; //AB线电压  V\n        optional float BCLineVolt = 15; //BC线电压  V\n        optional float CALineVolt = 16; //CA线电压  V\n        optional double roTotalEnery = 17; //正向总电量(kWh)\n        optional double reTotalEnergy = 26; //反向总电量(kWh)\n    }\n\n    message pvi_group {\n        repeated pvi_s pvInverter = 1;\n    }\n    message inverter_pv_s {\n        float voltage = 1; //光伏支路组串电压\n        float current = 2; //光伏支路组串电流\n        optional float power = 3; //光伏支路组串电流\n    }\n    message inverter_temp_s {\n        float inside = 1; //内部温度(度)\n        repeated float IGBT = 2; //IGBT温度(度)\n        float heatsink = 3; //散热器温度(度)\n    }\n\n    message pvi_s {\n        string id = 1; //设备标识符\n        float Ua = 2; //A相电压(V)\n        float Ub = 3; //B相电压(V)\n        float Uc = 4; //C相电压(V)\n        float Ia = 5; //A相电流(A)\n        float Ib = 6; //B相电流(A)\n        float Ic = 7; //C相电流(A)\n        float frequency = 8; //频率(Hz)\n        float activePower = 9; //有功功率(kW)\n        float reactivePower = 10; //无功功率(Var)\n        float apparentPower = 11; //市在功率(kVA)\n        float limitPowerParam = 12; //限定有功功率(kW)\n        float dayEnergy = 13; //日发电量(kWh)\n        double totalEnergy = 14; //总发电量(kWh)\n        uint32 status =\n            15; //运行状态(0:离线; 1:待机; 3:故障; 4:运行; 5:关机)\n        repeated uint32 warnStatus = 16; //告警状态\n        repeated uint32 prtStatus = 17; //保护状态\n        repeated inverter_pv_s PV = 18; //光伏组串支路\n\n        uint64 timestamp = 19; //时间\n        float ABLineVolt = 20; //AB线电压(V)\n        float BCLineVolt = 21; //BC线电压(V)\n        float CALineVolt = 22; //CA线电压(V)\n        inverter_temp_s temperature = 23;\n\n        float insulation_resistance = 24; //绝缘阻抗值(MΩ)\n        repeated float MPPTVolt = 25; //MPPT电压(V)\n        repeated float MPPTCurrent = 26; //MPPT电流(A)\n        float factor = 27; //功率因子(范围0~1)\n        float DCPower = 28; //直流功率(kW)\n    }\n\n    message env_group {\n        repeated env_s environment = 1;\n    }\n    /* env_s - 环境监测仪 */\n    message env_s {\n        string id = 1; //环境检测仪ID\n        float temperature = 2; //环境温度\n        float humidity = 3; //环境湿度\n        float windSpeed = 4; //风速\n        float windDirection = 5; //风向\n        float rainfall = 6; //雨量\n        int32 realHorizontalRadiation = 7; //水平辐射瞬时值（W/m²）\n        int32 realObliqueRadiation = 8; //倾斜辐射瞬时值（W/m²）\n        int32 realScatteredRadiation = 9; //散射辐射瞬时值（W/m²）\n        int32 realDirectRadiation = 10; //直接辐射瞬时值（W/m²）\n        float totalDailyHorizontalRadiation =\n            11; //水平辐射日累计值（MJ/m²）\n        float totalDailyObliqueRadiation =\n            12; //倾斜辐射日累计值（MJ/m²）\n        float totalDailyScatteredRadiation =\n            13; //散射辐射日累计值（WJ/m²）\n        float totalDailyDirectRadiation =\n            14; //直接辐射日累计值（MJ/m²）\n        float lightDuration = 15; //光照持续时间（min）\n        float atmosphericPressureValue = 16; //大气压力Kpa\n        uint64 timestamp = 17; //数据时间戳\n    }\n\n    message cdmu_s {\n        string id = 1; //ID\n        float Voltage = 2; //电压\n        float Current = 3; //电流\n        float Power = 4; //功率\n        float SOC = 5; //SOC\n        float UseEnergy = 6; //可充电量\n        float LeftEnergy = 7; //可放电量\n        double AllInEnergy = 8; //累计充电量\n        double AllOutEnergy = 9; //累计放电量\n        double AllOutAH = 10; //累计放电AH\n        double AllInAH = 11; //累计充电AH\n        uint32 OnlineStatus = 12; //在线状态\n        uint32 RunStatus = 13; //运行状态字\n        uint32 WarnStatus = 14; // 告警状态字\n        uint64 timestamp = 15; //时间戳\n        //2023-08-15增加 增加正负母线最小绝缘阻值\n        float PBusResistor = 16; //正母线最小绝缘阻值\n        float NBusResistor = 17; //负母线最小绝缘阻值\n    }\n\n    message bmu_s {\n        string id = 1; //ID\n        float Voltage = 2; //总电压\n        float BalanceV = 3; // 均衡电压\n        float balanceI = 4; //均衡电流\n        float current = 5; //电流\n        uint32 balanceSite = 6; //均衡位置\n        uint32 balanceStatus = 7; //均衡状态\n        uint32 onlineStatus = 8; //在线状态字\n        float VMax = 9; //最大电压\n        uint32 VMaxSite = 10; //最大电压位置\n        float VMin = 11; //最小电压\n        uint32 VMinSite = 12; //最小电压位置\n        float VAvg = 13; //平均电压\n        float TMin = 14; //最小温度\n        uint32 TMinSite = 15; //最小温度位置\n        float TMax = 16; //最大温度\n        uint32 TMaxSite = 17; //最大温度位置\n        repeated float TempPoint = 18; //温度点\n        repeated float CellVoltage = 19; //单体电压点\n        uint64 timestamp = 20; //时间\n        optional float NegativePoleTemp = 21; //负极极柱温度\n        optional float LeftFuseTemp = 22; //左侧熔断器温度\n        optional float RightFuseTemp = 23; //右侧熔断器温度\n        optional float PositivePoleTemp = 24; //正极极柱温度\n    }\n\n    message coolor_s {\n        string BCUId = 1; //ID\n        float DehumidifierTemp = 2; //除湿机当前温度\n        float DehumidifierHumidity = 3; //除湿机当前湿度\n        uint32 DehumidifierStatus = 4; //除湿机状态\n        float DehumidifierTempOnValue = 5; //除湿机启动温度值\n        float DehumidifierTempOffValue = 6; //除湿机停止温度值\n        float DehumidifierHumidityOnValue = 7; //除湿机启动湿度值\n        float DehumidifierHumidityOffValue = 8; //除湿机停止湿度值\n        uint32 LiquidCoolingFireStatus = 9; //消防火灾信号\n        uint32 LiquidCoolingStatus = 10; //液冷机当前模式\n        uint32 WaterPumpStatus = 11; //水泵状态\n        uint32 CompressorStatus = 12; //压缩机状态\n        float LiquidCoolingRefrigeratingValue = 13; //液冷机制冷点\n        float LiquidCoolingHeatingValue = 14; //液冷机加热点\n        float LiquidCoolingRefrigeratingGap = 15; //液冷机制冷回差\n        float LiquidCoolingHeatingGap = 16; //液冷机加热回差\n        float LiquidCoolingOutWaterTemp = 17; //液冷机出水温度\n        float LiquidCoolingInWaterTemp = 18; //液冷机回水温度\n        float LiquidCoolingOutAirTemp = 19; //液冷机排气温度\n        float LiquidCoolingEnvironmentTemp = 20; //液冷机环境温度\n        float LiquidCoolingInWaterPressure = 21; //液冷机进水压力\n        float LiquidCoolingOutWaterPressure = 22; //液冷机出水压力\n        repeated uint32 FaultStatus = 23; //故障状态字\n        uint64 timestamp = 24; //时间\n    }\n\n    message bcu_group {\n        repeated bcu_s bcu = 1;\n    }\n    message cell_s {\n        float result = 1; //结果\n        uint32 pack = 2; //Pack编号\n        uint32 cell = 3; //电芯编号\n    }\n    /* bcu_s - 电池簇 */\n    message bcu_s {\n        string id = 1; //簇ID\n        uint32 BMUOnline = 2; //M-BMS在线状态字\n        uint32 DMUOnline = 3; //HVM在线状态字\n        repeated uint32 warn = 4; //C-BMS告警状态字\n        repeated uint32 protect = 5; //C-BMS保护状态字\n        uint32 balance = 6; //M-BMS均衡状态字\n\n        uint32 SystemStatus = 7; //C-BMS系统状态字 2：充电 1：放电 0：静止\n        uint32 sampleErr = 8; // C-BMS采样断线状态字\n        float packAverageVoltage = 9; // PACK平均电压\n        float cellAverageVoltage = 10; // 单体平均电压\n\n        cell_s voltageMax = 11;\n        cell_s voltageMin = 12;\n        cell_s temperatureMax = 13;\n        cell_s temperatureMin = 14;\n        cdmu_s cdmu = 15; //DMU数据\n\n        repeated bmu_s pack = 16; //BMU数据\n        uint64 timestamp = 17; //时间戳\n        uint32 fire_alarm = 18; //火警状态字\n        uint32 airCondition = 19; //空调状态字\n        uint32 lightningStrike = 20; //雷击状态字\n        uint32 WaterOverflow = 21; //水漫状态字\n        uint32 door = 22; //柜门状态字 0：关门  1：开门\n        coolor_s coolor = 23; //液冷信息\n    }\n\n    message optimizer_group {\n        repeated optimizer_s optimizer = 1;\n    }\n    message optimizer_s {\n        string id = 1; // 设备标识\n        uint32 state = 3; // 状态\n        float power = 4; // 输出功率(W)\n        repeated float inVoltage = 5; // 输入电压(V)\n        repeated float inCurrent = 6; // 输入电流(A)\n        float outVoltage = 7; // 输出电压(V)\n        float outCurrent = 8; // 输出电流(A)\n        float temperature = 9; // 温度(度)\n        float totalEnergy = 10; // 累计发电量(kWh)\n        uint64 timestamp = 11; // 时间时间戳\n    }\n\n    message pcs_group {\n        repeated pcs_s pcs = 1;\n    }\n\n    /* pcs_s - Power Conversion System 储能逆变器运行状态 */\n    message pcs_s {\n        string id = 1; //设备标识符\n        float Ua = 2; //A相电压(V)\n        float Ub = 3; //B相电压(V)\n        float Uc = 4; //C相电压(V)\n        float Ia = 5; //A相电流(A)\n        float Ib = 6; //B相电流(A)\n        float Ic = 7; //C相电流(A)\n        float frequency = 8; //频率(Hz)\n        float activePower = 9; //有功功率(kW)\n        float reactivePower = 10; //无功功率(Var)\n        float apparentPower = 11; //市在功率(kVA)\n        float dcVoltage = 12; //直流电压(V)\n        float dcCurrent = 13; //直流电流(A)\n        float dcPower = 14; //直流功率(kW)\n        uint32 status =\n            15; //运行状态(0:离线; 1:待机; 3:故障; 4:运行; 5:关机)\n        repeated uint32 warn = 16; //告警状态\n        repeated uint32 protect = 17; //保护状态\n        uint32 runMode = 18; //2:待机 1：开机 0：关机 ......\n        uint32 gridMode = 19; //1:离网 0：并网（默认）2:并离网\n        uint32 controlMode = 20; // 0:本地控制（默认） 1：远程控制\n        uint64 timestamp = 21; //时间戳\n\n        optional float voltageAB = 22; //AB线电压(V)\n        optional float voltageBC = 23; //BC线电压(V)\n        optional float voltageCA = 24; //CA线电压(V)\n        inverter_temp_s temperature = 25;\n        float insulationResistance = 26; //绝缘阻抗(MΩ)\n        float factor = 27; //功率因子(范围0~1)\n    }\n}",
          "enableCompatibilityWithJsonPayloadFormat" : false,
          "useJsonPayloadFormatForDefaultDownlinkTopics" : false
        }
      }
    },
    "provisionDeviceKey" : null,
    "provisionType" : "DISABLED",
    "softwareId" : null,
    "transportType" : "MQTT",
    "type" : "DEFAULT"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}